#!/bin/sh /etc/rc.common

USE_PROCD=1

START=99

PROGRAM="/root/watchdog_mbim"

PID_FILE="/var/run/watchdog_mbim.pid"

# if you want to delay the daemon startup see Readme
#
#boot() {
        #
        # from "https://forum.openwrt.org/t/solved-start-init-script-at-boot-after-localhost-is-ready/11507"
        #
        # waits a certain amount of time to activate the service at the first boot of the router
        # it is an improper solution that allows the router to perform a first boot without the daemon running
        # in order to avoid initial "race conditions"
        #
        # It's a dirty solution because for 600 seconds from boot the service will respond
        # in an anomalous way whether it is in "running" or "inactive" state
        #
        # show command:
        #
        # service watchdog_mbim status; service watchdog_mbim info
        #
        # I preferred to use the "loopback" interface because I am not sure if the "wan" interface
        # is in an operational state at boot
        #
        # Wait 600 seconds
        #
        #ubus -t 600 wait_for network.interface network.loopback 2>/dev/null
        #rc_procd start_service
#}


start_service() {
        procd_open_instance
        
        # from "https://github.com/openNDS/openNDS/blob/master/linux_openwrt/opennds/files/etc/init.d/opennds"
        # solves "Instance not stopped SIGTERM, sending SIGKILL instead" given 180 seconds wait after doing ifdown wan && ifup wan
        procd_set_param term_timeout 240
        
        procd_set_param command $PROGRAM
        procd_set_param pidfile "$PID_FILE"
        procd_set_param respawn
        procd_set_param stdout 1
        procd_set_param stderr 1
        procd_close_instance
}

service_triggers() {
        #
        # from "https://forum.openwrt.org/t/procd-init-interface-trigger-for-non-daemon-executables-that-are-not-running-permanently/58258/8"
        #
        # when it detects an event on the defined interface it does the operation, it helps debugging the service
        # after giving the "ifdown wan" command you should see an event with the command:
        #
        # ubus monitor | grep '"method":"up","data":{"interface":"wan"}}'
        #
        # and as a consequence of this it should restart the service
        #
        procd_open_trigger
        procd_add_interface_trigger "interface.*.up" "wan" /etc/init.d/watchdog_mbim restart
        procd_close_trigger
}
